// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
  
}
// to push the prisma schema into db use command: npx prisma db push
// to add types and functions locally to the prisma schema use command: npx prisma generate

model Board {
  id            String @id @default(uuid())
  orgId         String
  title         String
  imageId       String
  imageThumbUrl String @db.Text
  imageFullUrl  String @db.Text
  imageLinkHTML String @db.Text
  imageUserName String @db.Text

  lists         List[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model List {
  id        String @id @default(uuid())
  title     String
  order      Int

  boardId   String
  board     Board @relation(fields: [boardId], references: [id],onDelete: Cascade)

  @@index([boardId])

  cards     Card[]

  status    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Card {
  id        String @id @default(uuid())
  title     String
  order      Int
  description String? @db.Text

  listId   String
  list     List @relation(fields: [listId], references: [id],onDelete: Cascade)

  priority String

  assignedImageUrl String
  assignedName String
  assignedId String

  reporterImageUrl String
  reporterName String
  reporterId String

  attachments Attachments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comments[]
}

model Comments{
  id        String @id @default(uuid())
  text      String
 
   listId String
   cardId   String
   orgId String
   
   card     Card @relation(fields: [cardId], references: [id],onDelete: Cascade)


   userId   String
   userName String
   userImage String

   createdAt DateTime @default(now())

}

model Attachments{
  id        String @id @default(uuid())
  value String

   listId String
   cardId   String
   orgId String
   
   card     Card @relation(fields: [cardId], references: [id],onDelete: Cascade)

  publicId String
  format String
  
   userId   String
   userName String
   userImage String

   createdAt DateTime @default(now())
}



enum ACTIONS {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model Activity {
  id        String @id @default(uuid())
  orgId     String
  action    ACTIONS
  entityId  String
  entityType    ENTITY_TYPE
  entityTitle  String
  userId    String
  userImage String @db.Text
  userName  String @db.Text
  boardTitle String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}